!function(t){var i={};function e(s){if(i[s])return i[s].exports;var n=i[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=t,e.c=i,e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:s})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(e.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var n in t)e.d(s,n,function(i){return t[i]}.bind(null,n));return s},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";function s(t,i){for(var e=0;e<i.length;e++){var s=i[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}e.r(i);var n=new(function(){function t(){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t);var i=navigator.userAgent.toLowerCase();this.sp=-1!==i.indexOf("iphone")||-1!==i.indexOf("android")&&-1!==i.indexOf("mobile"),this.ipad=-1!==i.indexOf("ipad")||-1!==i.indexOf("macintosh")&&"ontouchend"in document,this.tab=!this.sp&&(this.ipad||-1!==i.indexOf("android")),this.touch="ontouchend"in document,this.msie=-1!==i.indexOf("msie")||-1!==i.indexOf("trident"),this.edge=-1!==i.indexOf("edge"),this.safari=-1!==i.indexOf("safari")&&-1===i.indexOf("chrome"),this.android=-1!==i.indexOf("android")}var i,e,n;return i=t,(e=[{key:"isSp",value:function(){return!!this.sp}},{key:"isAndroid",value:function(){return!!this.android}},{key:"isTab",value:function(){return!!this.tab}},{key:"isTouch",value:function(){return!!this.touch}},{key:"isMSIE",value:function(){return!!this.msie}},{key:"isEdge",value:function(){return!!this.edge}},{key:"isSafari",value:function(){return!!this.safari}}])&&s(i.prototype,e),n&&s(i,n),t}());function r(t,i){for(var e=0;e<i.length;e++){var s=i[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}var o=function(){function t(){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t)}var i,e,s;return i=t,s=[{key:"norm",value:function(t,i,e){return(t-i)/(e-i)}},{key:"lerp",value:function(t,i,e){return(e-i)*t+i}},{key:"map",value:function(i,e,s,n,r){return t.lerp(t.norm(i,e,s),n,r)}},{key:"clamp",value:function(t,i,e){return Math.min(Math.max(t,Math.min(i,e)),Math.max(i,e))}},{key:"distance",value:function(t,i){var e=i.x-t.x,s=i.y-t.y;return Math.sqrt(e*e+s*s)}},{key:"distanceXY",value:function(t,i,e,s){var n=e-t,r=s-i;return Math.sqrt(n*n+r*r)}},{key:"circleCollision",value:function(i,e){return t.distance(i,e)<=i.radius+e.radius}},{key:"circlePointCollision",value:function(i,e,s){return t.distanceXY(i,e,s.x,s.y)<s.radius}},{key:"pointInRect",value:function(i,e,s){return t.inRange(i,s.x,s.x+s.width)&&t.inRange(e,s.y,s.y+s.height)}},{key:"inRange",value:function(t,i,e){return t>=Math.min(i,e)&&t<=Math.max(i,e)}},{key:"rangeIntersect",value:function(t,i,e,s){return Math.max(t,i)>=Math.min(e,s)&&Math.min(t,i)<=Math.max(e,s)}},{key:"rectIntersect",value:function(i,e){return t.rangeIntersect(i.x,i.x+i.width,e.x,e.x+e.width)&&t.rangeIntersect(i.y,i.y+i.height,e.y,e.y+e.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,i){return t+Math.random()*(i-t)}},{key:"randomInt",value:function(t,i){return Math.floor(t+Math.random()*(i-t+1))}},{key:"randomDist",value:function(i,e,s){for(var n=0,r=0;r<s;r+=1)n+=t.randomRange(i,e);return n/s}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(e=null)&&r(i.prototype,e),s&&r(i,s),t}();function h(t,i){for(var e=0;e<i.length;e++){var s=i[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}var a=function(){function t(){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.mouse={x:0,y:0},this.touch={x:0,y:0},this.dpr=window.devicePixelRatio||1}var i,e,s;return i=t,(e=[{key:"mousemove",value:function(t){this.mouse.x=t.clientX*this.dpr,this.mouse.y=t.clientY*this.dpr}},{key:"touchmove",value:function(t){this.touch.x=t.touches[0].clientX*this.dpr,this.touch.y=t.touches[0].clientY*this.dpr}}])&&h(i.prototype,e),s&&h(i,s),t}();function c(t,i){for(var e=0;e<i.length;e++){var s=i[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}var l=function(){function t(i,e,s,n,r,h){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=i,this.ctx=e,this.color=h,this.x=s,this.y=n,this.vx=o.randomInt(-12,12),this.vy=-3,this.friction=.8,this.grav=1,this.maxLife=80,this.life=80,this.radius=r,this.scale=this.life/this.maxLife*this.radius,this.type=Math.floor(7*Math.random()),this.opacity=.6}var i,e,s;return i=t,(e=[{key:"draw",value:function(){switch(this.scale=this.life/this.maxLife*this.radius,this.ctx.beginPath(),this.type){case 0:this.ctx.save(),this.ctx.arc(this.x,this.y,this.scale,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.fill(),this.ctx.restore();break;case 1:this.ctx.save(),this.ctx.arc(this.x,this.y,this.scale,0,2*Math.PI,!1),this.ctx.strokeStyle=this.color,this.ctx.lineWidth=5,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.stroke(),this.ctx.restore();break;case 2:this.trianglex=48,this.triangley=80,this.ctx.save(),this.ctx.translate(-this.trianglex/2,-this.triangley/2),this.ctx.moveTo(this.x,this.y),this.ctx.lineTo(this.x-this.trianglex,this.y+this.triangley),this.ctx.lineTo(this.x+this.trianglex,this.y+this.triangley),this.ctx.lineTo(this.x,this.y),this.ctx.fillStyle=this.color,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.fill(),this.ctx.restore();break;case 3:this.trianglex=48,this.triangley=80,this.ctx.save(),this.ctx.translate(-this.trianglex/2,-this.triangley/2),this.ctx.moveTo(this.x,this.y),this.ctx.lineTo(this.x-this.trianglex,this.y+this.triangley),this.ctx.lineTo(this.x+this.trianglex,this.y+this.triangley),this.ctx.lineTo(this.x,this.y),this.ctx.strokeStyle=this.color,this.ctx.lineWidth=5,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.stroke(),this.ctx.restore();break;case 4:this.ctx.save(),!function(t,i,e,s,n,r){for(var o=0;o<=2*s;++o){var h=o*Math.PI/s-Math.PI/2,a=o%2==0?n:r;t.lineTo(i+a*Math.cos(h),e+a*Math.sin(h))}}(this.ctx,this.x,this.y,5,60,25),this.ctx.fillStyle=this.color,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.fill(),this.ctx.restore();break;case 5:this.rectx=90,this.recty=90,this.ctx.save(),this.ctx.translate(-this.rectx/2,-this.recty/2),this.ctx.rect(this.x,this.y,this.rectx,this.recty),this.ctx.fillStyle=this.color,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.fill(),this.ctx.restore();break;case 6:this.rectx=90,this.recty=90,this.ctx.save(),this.ctx.translate(-this.rectx/2,-this.recty/2),this.ctx.rect(this.x,this.y,this.rectx,this.recty),this.ctx.strokeStyle=this.color,this.ctx.lineWidth=5,this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha=this.opacity,this.ctx.stroke(),this.ctx.restore()}this.ctx.closePath()}},{key:"update",value:function(){this.y+this.scale+this.vy>this.canvas.height&&(0===this.type||1===this.type)?(this.vy=-this.vy*this.friction,this.life+=-20,this.shatter()):0!==this.type&&1!==this.type&&this.y+this.scale+this.vy>this.canvas.height?this.life=0:this.vy+=this.grav,this.x+=this.vx,this.y+=this.vy}},{key:"shatter",value:function(){}}])&&c(i.prototype,e),s&&c(i,s),t}();function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,i){for(var e=0;e<i.length;e++){var s=i[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function x(t,i){return!i||"object"!==u(i)&&"function"!=typeof i?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):i}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function d(t,i){return(d=Object.setPrototypeOf||function(t,i){return t.__proto__=i,t})(t,i)}var v=function(t){function i(t,e,s,n,r,h){var a;return function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,i),(a=x(this,y(i).call(this,t,e,s,n,r,h))).vx=o.randomInt(-5,5),a.vy=o.randomInt(-15,15),a.friction=.8,a.grav=.1,a.life=100,a.opacity=1,a.maxOpacity=100,a}var e,s,n;return function(t,i){if("function"!=typeof i&&null!==i)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(i&&i.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),i&&d(t,i)}(i,t),e=i,(s=[{key:"draw",value:function(){this.scale=this.life/this.maxLife*this.radius,this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.scale,0,2*Math.PI,!1),this.ctx.shadowColor=this.color,this.ctx.shadowBlur=30,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.fillStyle=this.color,this.ctx.globalAlpha=this.opacity,this.ctx.fill(),this.ctx.closePath(),this.ctx.restore()}},{key:"update",value:function(){this.y+this.radius+this.vy>this.canvas.height?this.vy=-this.vy*this.friction:this.vy+=this.grav,this.x+=this.vx,this.y+=this.vy,this.life+=-1,this.maxOpacity+=-1,this.opacity>=0&&(this.opacity+=-1/this.maxOpacity)}}])&&f(e.prototype,s),n&&f(e,n),i}(l);!function(){var t=document.getElementById("canvas"),i=t.getContext("2d"),e=window.devicePixelRatio||1,s=[],r=[],h=["#D24136","#EB8A3E","#EBB582","#785A46"],c=window.innerWidth,u=window.innerHeight;function f(){c=window.innerWidth,u=window.innerHeight,t.width=c*e,t.height=u*e,i.save(),i.scale(e,e),i.restore(),t.style.width=c+"px",t.style.height=u+"px"}if(f(),window.onresize=function(){f()},n.isSp()){var x=new a;x.touch.x=t.width/2,x.touch.y=t.height/2,window.addEventListener("touchmove",(function(e){x.touchmove(e),s.push(new l(t,i,x.touch.x,x.touch.y,50,o.randomColor(h))),s.forEach((function(e){e.shatter=function(){for(var s=0;s<1;s++)r.push(new v(t,i,e.x,e.y,10,o.randomColor(h)))}}))}))}else{var y=new a;y.mouse.x=t.width/2,y.mouse.y=t.height/2,window.addEventListener("mousemove",(function(e){y.mousemove(e),s.push(new l(t,i,y.mouse.x,y.mouse.y,50,o.randomColor(h))),s.forEach((function(e){e.shatter=function(){for(var s=0;s<1;s++)r.push(new v(t,i,e.x,e.y,10,o.randomColor(h)))}}))}))}!function e(){i.fillStyle="#333333",i.fillRect(0,0,t.width,t.height);for(var n=0;n<s.length;n++){var o=s[n];o.update(),o.draw(),o.life<=0&&(s.splice(n,1),n+=-1)}for(var h=0;h<r.length;h++){var a=r[h];a.update(),a.draw(),a.life<=0&&(r.splice(h,1),h+=-1)}requestAnimationFrame(e)}()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,